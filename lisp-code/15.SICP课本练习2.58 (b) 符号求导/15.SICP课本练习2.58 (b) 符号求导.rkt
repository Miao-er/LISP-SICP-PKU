#lang racket
(define (variable? exp) (symbol? exp))
(define (same-variable? exp var) (and (variable? exp) (variable? var) (eq? exp var)))
(define (findop lst)
  
         (cond ((null? lst) '?)
               ((eq? (car lst) '+) '+)
               ((eq? (car lst) '*)
                (if (eq? (findop (cdr lst)) '+) '+ '*))
               (else (findop (cdr lst)))))
(define (transform x) (if (and (pair? x) (= (length x) 1)) (car x) x))
(define (sum? lst) (and (pair? lst) (eq? (findop lst) '+)))
(define (product? lst) (and (pair? lst) (eq? (findop lst) '*)))
(define (make-sum a1 a2) (cond ((=number? a1 0) a2)
                               ((=number? a2 0) a1)
                               ((and (number? a1) (number? a2)) (+ a1 a2))
                               ((and (list? a1) (list? a2) (append a1 (list '+) a2)))
                               ((list? a1) (append a1 (list '+) (list a2)))
                               ((list? a2) (append (list a1) (list '+) a2))
                               (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (addend s) (define (inter s) (cond ((eq? (car s) '+) '()) (else (cons (car s) (inter (cdr s)))))) (transform (inter s)))
(define (augend s) (define (inter s) (cond ((eq? (car s) '+) (cdr s)) (else (inter (cdr s))))) (transform (inter s)))
(define (multiplier s) (define (inter s) (cond ((eq? (car s) '*) '()) (else (cons (car s) (inter (cdr s)))))) (transform (inter s)))
(define (multiplicand s) (define (inter s) (cond ((eq? (car s) '*) (cdr s)) (else (inter (cdr s))))) (transform (inter s)))
(define (=number? x y) (and (number? x) (number? y) (= x y)))
(define (deriv exp var)
  (cond ((number? exp ) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum 
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else 
         (error "wrong format"))))

(define (myloop)
  (let ((a (read)))
    (if (eq? a eof)
        (void)
        (begin (display (deriv a 'x)) (newline) (myloop)))))

(myloop)