描述
Exercise 2.92.  By imposing an ordering on variables, extend the polynomial package so that addition and multiplication of polynomials works for polynomials in different variables.  (This is not easy!)



基于课本上的数据导向程序设计思想，编程完成两个多项式的乘法和加法。

本题中多项式的变量的名字，按优先级从高到低，只有 'a, 'b ,'c ,'d ,'e 五种。

每个多项式有一个主变量('a 'b 'c 'd 'e 五种之一)。多项式中各项的系数也可以是多项式。主变量为x的多项式，其系数中保证不会出现x。

例如,多项式:

2(c+1)a^2 + 3ba + 1

主变量是a, c 和 b只是各项系数之中出现的变量。


两个多项式A,B做运算，如果A的主变量x的优先级高于B的主变量，则整个B多项式就应该被看作是一个主变量为x的多项式，且该多项式只包含常数项，且常数项就是B。

多项式A和整数n做运算，则整数n应被直接加到多项式A的常数项上。


数据保证，在这种情况下，B中不会出现x。


本题中，多项式内部表示形式中，多项式的系数的要么是带标记的整数，要么是多项式。

在程序运行期间，

一个带标记的整数的内部形式形如：
(cons 'integer 4)

一个多项式3a^2 + 2a + 1的内部形式形如:
(polynomial a (2 (integer . 3))  (1 (integer . 2)) (0 (integer . 1)))

你需要拷贝课本中的大量程序并做适当修改。
要重写 apply-generic
要编写 display-poly 来显示多项式，build-poly来构造内部形式的多项式，还要编写一些你认为有必要的函数





#lang racket
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;以下是put和get的实现，不须搞明白也能完成本题
(require scheme/mpair)
(define (make-table)
  (let ((local-table (mlist '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (massoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (massoc key-2 (mcdr subtable))))
              (if record
                  (mcdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (massoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (massoc key-2 (mcdr subtable))))
              (if record
                  (set-mcdr! record value)
                  (set-mcdr! subtable
                            (mcons (mcons key-2 value)
                                  (mcdr subtable)))))
            (set-mcdr! local-table
                      (mcons (mlist key-1
                                  (mcons key-2 value))
                            (mcdr local-table)))))
      (void))    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

(define conversion-table (make-table))
(define get-coercion (conversion-table 'lookup-proc))
(define put-coercion (conversion-table 'insert-proc!))
;以上是put和get的实现，不须搞明白也能完成本题
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;------------- integer package
(define (install-integer-package)
  (define (tag x)
    (attach-tag 'integer x))    
  (put 'add '(integer integer)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(integer integer)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(integer integer)
       (lambda (x y) (tag (* x y))))
  (put 'div '(integer integer)
       (lambda (x y) ((get 'make 'rational )  x y)))
  (put 'make 'integer
       (lambda (x) (tag x)))
  (void))

(define (make-integer n)
  ((get 'make 'integer) n))


;--------general functions
  
(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum -- TYPE-TAG" datum)))
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum -- CONTENTS" datum)))
// 在此处补充你的代码
(install-integer-package)
(install-polynomial-package)
(define (add x y) (apply-generic 'add x y))
(define (mul x y) (apply-generic 'mul x y))


(define (make-poly var terms)
  ((get 'make 'polynomial) var terms))
(define (make-term order coeff) 
  ((get 'make 'polynomial-term) order coeff))

(displayln "******1")
(define e1 (make-poly 'a (list (list 1 (make-integer 3)) (list 0 (make-integer 2))))) ;3a+2
(define e2 (make-poly 'a (list (list 2 (make-integer 4)) (list 1 (make-integer 3))))) ;4a^2 + 3a
(displayln e1)
(displayln e2)
(displayln (add e1 e2))
(displayln (mul e1 e2))

(displayln "******2")

(define c1 (make-poly 'b (list (list 1 (make-integer 3)) (list 0 (make-integer 2))))) ;3b+2
(define c2 (make-poly 'b (list (list 2 (make-integer 4)) (list 1 (make-integer 3))))) ;4b^2 + 3b

(define e3 (make-poly 'a (list (list 1 c1) (list 0 (make-integer 2))))) 
(define e4 (make-poly 'a (list (list 2 (make-integer 4)) (list 1 c2)))) 

(displayln (add e3 e4))

(displayln "******")
(define (myloop)
  (let ((a (read)))
    (if (eq? a eof)
        (void)
        (let ((op (car a))
              (e1 (cadr a))
              (e2 (caddr a)))
          (if (eq? op '+)
              (display-poly (add (build-poly e1) (build-poly e2)))
              (display-poly (mul (build-poly e1) (build-poly e2))))
          (myloop)))))
              
(myloop)
输入
每行一个scheme形式的列表，表示一次多项式运算。
第一个元素是运算符，为 + 或 *
第二个元素和第三个元素都是scheme形式的列表，各表示一个多项式。


在输入和输出的时候，多项式表示法如下:



1. 用 scheme格式的列表表示多项式。

2. 表中的第一个元素是多项式的主变量名

3. 以后每一个元素都是列表，代表多项式中的每一项。这些项按次数从高到低排列。

4. 多项式的每一项都是一个列表，它有两个元素。第一个元素是整数，代表项的次数。第二个元素是整数或者另一个多项式，代表项的系数。


例如：

例如: (a (2 (b (3 1) (2 2))) (1 5) (0 2))

表示 (b^3+2b^2)a^2 + 5a + 2
输出
对每行输入，按输入中描述的格式输出计算的结果。
样例输入
(+ (a (4 3) (3 2) (2 1) (0 1)) (a (4 2) (1 3) (0 9)))
(* (a (4 3) (3 2) (2 1) (0 1)) (a (4 2) (1 3) (0 9)))
(+ (a (4 3) (3 2) (2 1) (0 1)) (b (4 2) (1 3) (0 9)))
(+ (a (2 (b (3 1) (2 2))) (1 5)) (a (2 (c (2 2))) (1 4)))
(+ (a (1 2) (0 (c (2 1) (1 2) (0 4)))) (b (1 2) (0 3)))
(* (a (1 2) (0 (c (2 1) (1 2) (0 4)))) (b (1 2) (0 3)))
(* (a (2 (b (3 1) (2 2))) (1 5)) (a (2 (c (2 2))) (1 4)))
样例输出
******1
(polynomial a (1 (integer . 3)) (0 (integer . 2)))
(polynomial a (2 (integer . 4)) (1 (integer . 3)))
(polynomial a (2 (integer . 4)) (1 (integer . 6)) (0 (integer . 2)))
(polynomial a (3 (integer . 12)) (2 (integer . 17)) (1 (integer . 6)))
******2
(polynomial a (2 (integer . 4)) (1 (polynomial b (2 (integer . 4)) (1 (integer . 6)) (0 (integer . 2)))) (0 (integer . 2)))
******
(a (4 5) (3 2) (2 1) (1 3) (0 10))
(a (8 6) (7 4) (6 2) (5 9) (4 35) (3 21) (2 9) (1 3) (0 9))
(a (4 3) (3 2) (2 1) (0 (b (4 2) (1 3) (0 10))))
(a (2 (b (3 1) (2 2) (0 (c (2 2))))) (1 9))
(a (1 2) (0 (b (1 2) (0 (c (2 1) (1 2) (0 7))))))
(a (1 (b (1 4) (0 6))) (0 (b (1 (c (2 2) (1 4) (0 8))) (0 (c (2 3) (1 6) (0 12))))))
(a (4 (b (3 (c (2 2))) (2 (c (2 4))))) (3 (b (3 4) (2 8) (0 (c (2 10))))) (2 20))
提示
对运算过程中产生的系数为0的项，就留着，不要删掉