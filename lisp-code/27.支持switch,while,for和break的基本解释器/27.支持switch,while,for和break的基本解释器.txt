描述
在基本的scheme解释器的基础上进行修改，使之支持while语句，switch语句，for 语句，break语句。

一）while 语句格式为：

(while predicate
         exp1exp2 ....expn)

其中predicate exp1 exp2 .. expn均为一个scheme表达式



while循环的执行过程是：

1) 求值predicate,若其值为true，继续下一步，若其值为false则转到4）

2) 依次求值exp1 exp2 ..expn

3) 转1)

4) while 语句执行结束。整个while语句返回值是(void)


二）switch语句的格式是：

(switch x  
   (C1 EXP11 EXP12...EXP1n)

   (C2 EXP21 EXP22...EXP2n)

   .....

   (default EXPn1 EXPn2...EXPnn)

)

其中x C1 .. Cn,  exp11,exp21.. expnn

均为一个scheme表达式

switch执行的过程是：

1) 先求值表达式x

2) 依次求值表达式Ci，如果Ci的值和x相同，则依次执行EXPi1，EXPi2 ...EXPin switch语句结束，其返回值为EXPin

3) 如果Ci...Cn都和x不相等，则依次执行EXPn1,EXPn2...EXPnn, switch表达式返回值为EXPnn

不同条件Ci后面的表达式个数不一定要相同。每个条件Ci后面，至少会有一个表达式



三）for 语句格式为：



(for init predicate step

    exp1  exp2  .... expn)


其中init  predicate  step

    exp1  exp2  .... expn


均为一个scheme表达式

for循环执行的过程是：

1) 求值init

2) 求值predicate，若其值不为true，则跳转到6) 若其值为true，则继续下一步

3) 依次求值exp1 ,exp2 ...expn

4）求值step

5) 转2)

6) for 语句执行结束，整个for语句的返回值是(void)



init可以是(), 表示什么都不做

predicate 不能是()

step 也可以是() ，表示什么都不做

exp1,...expn至少会有一个



四) break语句格式为：

(break)

break语句只可能出现在for 循环语句中间（不会出现在init、predicate、和step中） 一旦执行for循环的过程中，执行了break语句，则

for语句立即执行完毕，程序转到for 语句之后的部分执行。for循环可以嵌套，break只跳出包含它的最内层循环

输入
一段scheme程序。除了样例中的scheme基本过程，数据里的程序中还可能会用到not, null? ,car ,cdr,remainder
输出
输入的 scheme程序的运行结果
样例输入
(displayln "1----")
(define x 140)
(switch (- x 100)
        (x (+ x 3)(* x 5))
        (30 (displayln x) )
        ((+ 20 20) (displayln (* x x))  x)
        (default 100)
        )

(displayln "2----")
(switch (- x 100)
        (x (+ x 3)(* x 5))
        (30 (displayln x) )
        (50 (displayln (* x x))  x)
        (default 100)
        )


(displayln "3----")
(define x 3)

(for ()
  (< x 8)
  ()
  (if (> x 4)
      (break)
      (displayln "***"))
  
  (display x) (display " ")
  (displayln (* x x))
  (set! x (+ x 1)))


(displayln "4----")

(define y 5)
(for (set! x 0)
  (< x 5)
  (set! x (+ x 1))
  (for (set! y (+ x 1))
    (< y 5)
    (set! y (+ y 1))
    (if (= (remainder  (+ x y) 4) 2)
        (break)
        1)
    (display x)(display " ") (displayln y)))

(displayln "5----")
(define k 2)
(while (< k 5)
       (displayln (* k k))
       (set! k (+ k 1)))
样例输出
19600
140
2----
100
3----
***
3 9
***
4 16
4----
0 1
1 2
1 3
1 4
2 3
3 4
5----
4
9
16
来源
Guo Wei