#lang racket
(define (quicksort lst)
  (if (null? lst)
      '()
  (append (quicksort (filter (lambda (x) (< x (car lst))) (cdr lst)))
          (list (car lst))
          (quicksort (filter (lambda (x) (> x (car lst))) (cdr lst))))))
(define (outlist? lst)
  (define (loop element lst)
    (cond ((null? lst) #t)
          ((= (car lst) element) #f)
          (else (loop element (cdr lst)))))
  (define (search element)
    (loop element lst))
  search)
(define (findsd ls1 ls2)
  (quicksort (append ls1 ls2)))
(define (findrc ls1 ls2)
  (filter (outlist? ls2) ls1))
(define (scanf ls1 ls2)
  (if (eq? ls1 eof)
      (void)
  (let ((l1 (quicksort ls1))
        (l2 (quicksort ls2)))
    
   (begin
     (display (findrc l1 l2))
     (display (findsd (findrc l1 l2) (findrc l2 l1)))
     (newline)
     (scanf (read) (read))))))
(scanf (read) (read))