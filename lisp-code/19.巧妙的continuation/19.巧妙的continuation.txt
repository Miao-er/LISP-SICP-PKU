描述
实现一个函数set-cont-list，这个函数接受一个正整数n，然后填充全局列表cont-list，使得cont-list满足以下条件：

cont-list的长度为n；

cont-list中每个元素都是一个continuation；

执行cont-list中第i个continuation的作用是输出i,i-1,i-2,……,3,2,1（每个数占一行），例如，执行(car cont-list)的结果是输出1，执行(cadrcont-list)的结果是输出2和1（各占一行）。

程序的基本框架已经写好，只需填充set-cont-list的剩余部分即可。



#lang racket

(define exit #f)

(define cont-list '())
(define len (read))

(define (set-cont-list n)
// 在此处补充你的代码
(define (show n)
  (define (show-helper l n)
    (if (= n 0)
        (if (continuation? (car l))
            ((car l) #f)
            (displayln "error"))
        (show-helper (cdr l) (- n 1))))
  (show-helper cont-list (- n 1)))

(define (main)
  (set-cont-list len)
  (define k (read))
  (if (eq? k eof)
      (void)
      (show k)))

(main)
输入
首先是一个正整数n，程序将以n为参数调用你编写的set-cont-list函数。
然后是若干小于等于n的正整数。每输入一个k，程序会执行cont-list中第k个continuation。
输出
对于每个输入的k，输出k,k-1,k-2,……,3,2,1（每个数占一行）。
样例输入
3
1 2 3
样例输出
1
2
1
3
2
1
提示
程序首先读入n，并将全局变量len的值赋为n，然后以n为参数调用你编写的set-cont-list函数（全局变量len可能有助于函数的编写，你可以随意更改它的值）。之后读入若干正整数，每读入一个，就会执行cont-list中相应的continuation（请注意main函数的编写方式。这种写法使得执行一个continuation的过程中会继续读入下一个数）。
注：上述流程的代码是已经给出的，你只需完成set-cont-list函数即可。 