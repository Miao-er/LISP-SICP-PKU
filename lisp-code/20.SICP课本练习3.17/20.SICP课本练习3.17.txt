描述
先参看3.16

Exercise 3.16.  Ben Bitdiddle decides to write a procedure to count the number of pairs in any list structure.  ``It's easy,'' he reasons.  ``The number of pairs in any structure is the number in the carplus the number in the cdrplus one more to count the current pair.'' So Ben writes the following procedure:

(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))

Show that this procedure is not correct.  In particular, draw box-and-pointer diagrams representing list structures made up of exactly three pairs for which Ben's procedure would return 3; return 4; return 7; never return at all.

再做3.17

Exercise 3.17.  Devise a correct version of the count-pairsprocedure of exercise 3.16that returns the number of distinct pairs in any structure.  (Hint: Traverse the structure, maintaining an auxiliary data structure that is used to keep track of which pairs have already been counted.)

你需要编写一个正确的count-pair函数

#lang racket
(require r5rs)

(define env (scheme-report-environment 5))
(eval  ;only after evaluating your count-pairs, the program in the input can use count-pairs
 '
// 在此处补充你的代码
env)

(define (myloop)
  (define (eval-codes codes last-val)
    (if (null? codes)
        last-val
        (eval-codes (cdr codes) (eval (car codes) env))))
    
  (let ((codes (read)))
    (if (eq? codes eof)
        (void)
        (begin (displayln (eval-codes codes (void))) (myloop)))))


(myloop)
输入
每行一段scheme程序，该程序构造一个表，然后用你写的count-pairs统计该表中的序对数目。该程序被放在一对括号中。
输出
针对每行的程序，输出求序对数目的结果
样例输入
((count-pairs (list 1 2 3 4 5 6)))
((define x4 (list (list 1) 2))  (set-cdr! (car x4) (cdr x4))   (count-pairs x4))
((define e1 (cons 'a '())) (define e2 (cons e1 e1)) (define e7 (cons e2 e2)) (count-pairs e7))
样例输出
6
3
3
提示
1. 有了 (require r5rs) ，就不必使用 mlist了，list成为可修改序对。set-car,set-cdr都可以使用。
2. racke中(require r5rs)后， eval 即成为基本过程。该过程可以对一个scheme表达式在指定环境中求值，并返回求值的结果
3. 全局环境即为 (scheme-report-environment 5)
4. eval 的用法示例： (eval '(+ 3 7) (scheme-report-environment 5)), 返回值为 10。在要求值的表达式前加'即可。
5. 程序中用 eval 对你编写的 count-pairs函数进行了求值并将其加入到全局环境，因此输入中的程序就可以使用 count-pairs了。